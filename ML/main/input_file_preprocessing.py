# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ABmk4_H7sPASh5G5mMPjkn1zJuBb2iCu
"""

import pandas as pd
import datetime
# try:
#   # s = ''
#   # for _, _, files in os.walk('.'):
#   #     for f in files:
#   #         if (f.split('-')[0] == 'Test') and (f.split('-')[1] == 'input'):
#   #             s = f
#   # data_input = pd.read_excel('main/media/upldfile/' + s)
#   data_input = pd.read_excel('./media/' + name)
# except:
#   df_in = pd.DataFrame([])
# df_mtr = pd.read_excel('main/Кабель справочник МТР.xlsx')
# df_deliv = pd.read_excel('main/КТ-516 Разделительная ведомость на поставку МТР с учетом нормативных сроков поставки.xlsx', header=23)

def preproc_delivery_time(
    df_in: 'pd.DataFrame',
    df_mtr: 'pd.DataFrame',
    df_delivery: 'pd.DataFrame')-> 'pd.DataFrame':
  """
  Функция обрабатывает входной датафрейм и добавляет три столбца:
  'Код класса МТР' - соответствующий материалу;
  'Доставка: да/нет' - укладывается ли нормативный срок поставки в ожидаемый;
  'Ошибка' - код ошибки или 0 если ошибки нет
  Коды ошибки:
  0 = Ошибок не обнаружено
  1 = Нормативный срок поставки превышает требуемый
  2 = Необходимо указать подкласс товара

  Parameters:
  df_in (pd.DataFrame): DataFrame из входного файла.
  df_mtr (pd.DataFrame): DataFrame из 'Кабель справочник МТР.xlsx'.
  df_delivery (pd.DataFrame): DataFrame из 'КТ-516 Разделительная ведомость
  на поставку МТР с учетом нормативных сроков поставки.xlsx'

  Returns:
  pd.DataFrame: The sum of a and b.
  """
  res = df_in.copy()
  res['Код класса МТР'] = ''
  res['Доставка: да/нет'] = ''
  res['Ошибка'] = 0
  for ind in res.index:
    material = res['Материал'][ind]
    code = df_mtr[df_mtr['Материал'] == material]['Класс'].values[0]
    res.loc[ind, 'Код класса МТР'] = code
    date_request = datetime.datetime.strptime(res['Дата заказа'][ind],
                                            '%Y-%m-%d').date()
    date_delivery_want = datetime.datetime.strptime(res['Срок поставки'][ind],
                                                  '%Y-%m-%d').date()
    delivery_time = df_delivery[df_delivery['Класс в ЕСМ'] == code][
        'Нормативный срок поставки МТР, отсчитываемый с даты инициирования процедуры закупки  (календарные дни)**'].values[0]
    if delivery_time != 'Необходимо использовать подкласс':
      date_delivery_real = date_request + datetime.timedelta(days=int(delivery_time))
      if date_delivery_real <= date_delivery_want:
        res.loc[ind, 'Доставка: да/нет'] = 'Да'
      else:
        res.loc[ind, 'Доставка: да/нет'] = 'Нет'
        res.loc[ind, 'Ошибка'] = 1
    else:
      res.loc[ind, 'Ошибка'] = 2
  return res

# df_in_preprocessed = preproc_delivery_time(df_in, df_mtr, df_deliv)

#print(df_in_preprocessed.sample(5))
#print(df_in_preprocessed[df_in_preprocessed['Ошибка'] > 0])